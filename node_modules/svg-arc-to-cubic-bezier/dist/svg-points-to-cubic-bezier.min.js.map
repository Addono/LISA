{"version":3,"file":"svg-points-to-cubic-bezier.min.js","sources":["../src/index.js"],"sourcesContent":["const TAU = Math.PI * 2\n\nconst mapToEllipse = ({ x, y }, rx, ry, cosphi, sinphi, centerx, centery) => {\n  x *= rx\n  y *= ry\n\n  const xp = cosphi * x - sinphi * y\n  const yp = sinphi * x + cosphi * y\n\n  return {\n    x: xp + centerx,\n    y: yp + centery\n  }\n}\n\nconst approxUnitArc = (ang1, ang2) => {\n  const a = 4 / 3 * Math.tan(ang2 / 4)\n\n  const x1 = Math.cos(ang1)\n  const y1 = Math.sin(ang1)\n  const x2 = Math.cos(ang1 + ang2)\n  const y2 = Math.sin(ang1 + ang2)\n\n  return [\n    {\n      x: x1 - y1 * a,\n      y: y1 + x1 * a\n    },\n    {\n      x: x2 + y2 * a,\n      y: y2 - x2 * a\n    },\n    {\n      x: x2,\n      y: y2\n    }\n  ]\n}\n\nconst vectorAngle = (ux, uy, vx, vy) => {\n  const sign = (ux * vy - uy * vx < 0) ? -1 : 1\n  const umag = Math.sqrt(ux * ux + uy * uy)\n  const vmag = Math.sqrt(ux * ux + uy * uy)\n  const dot = ux * vx + uy * vy\n\n  let div = dot / (umag * vmag)\n\n  if (div > 1) {\n    div = 1\n  }\n\n  if (div < -1) {\n    div = -1\n  }\n\n  return sign * Math.acos(div)\n}\n\nconst getArcCenter = (\n  px,\n  py,\n  cx,\n  cy,\n  rx,\n  ry,\n  largeArcFlag,\n  sweepFlag,\n  sinphi,\n  cosphi,\n  pxp,\n  pyp\n) => {\n  const rxsq = Math.pow(rx, 2)\n  const rysq = Math.pow(ry, 2)\n  const pxpsq = Math.pow(pxp, 2)\n  const pypsq = Math.pow(pyp, 2)\n\n  let radicant = (rxsq * rysq) - (rxsq * pypsq) - (rysq * pxpsq)\n\n  if (radicant < 0) {\n    radicant = 0\n  }\n\n  radicant /= (rxsq * pypsq) + (rysq * pxpsq)\n  radicant = Math.sqrt(radicant) * (largeArcFlag === sweepFlag ? -1 : 1)\n\n  const centerxp = radicant * rx / ry * pyp\n  const centeryp = radicant * -ry / rx * pxp\n\n  const centerx = cosphi * centerxp - sinphi * centeryp + (px + cx) / 2\n  const centery = sinphi * centerxp + cosphi * centeryp + (py + cy) / 2\n\n  const vx1 = (pxp - centerxp) / rx\n  const vy1 = (pyp - centeryp) / ry\n  const vx2 = (-pxp - centerxp) / rx\n  const vy2 = (-pyp - centeryp) / ry\n\n  let ang1 = vectorAngle(1, 0, vx1, vy1)\n  let ang2 = vectorAngle(vx1, vy1, vx2, vy2)\n\n  if (sweepFlag === 0 && ang2 > 0) {\n    ang2 -= TAU\n  }\n\n  if (sweepFlag === 1 && ang2 < 0) {\n    ang2 += TAU\n  }\n\n  return [ centerx, centery, ang1, ang2 ]\n}\n\nconst arcToBezier = ({\n  px,\n  py,\n  cx,\n  cy,\n  rx,\n  ry,\n  xAxisRotation = 0,\n  largeArcFlag = 0,\n  sweepFlag = 0\n}) => {\n  const curves = []\n\n  if (rx === 0 || ry === 0) {\n    return []\n  }\n\n  const sinphi = Math.sin(xAxisRotation * TAU / 360)\n  const cosphi = Math.cos(xAxisRotation * TAU / 360)\n\n  const pxp = cosphi * (px - cx) / 2 + sinphi * (py - cy) / 2\n  const pyp = -sinphi * (px - cx) / 2 + cosphi * (py - cy) / 2\n\n  if (pxp === 0 && pyp === 0) {\n    return []\n  }\n\n  rx = Math.abs(rx)\n  ry = Math.abs(ry)\n\n  const lambda =\n    Math.pow(pxp, 2) / Math.pow(rx, 2) +\n    Math.pow(pyp, 2) / Math.pow(ry, 2)\n\n  if (lambda > 1) {\n    rx *= Math.sqrt(lambda)\n    ry *= Math.sqrt(lambda)\n  }\n\n  let [ centerx, centery, ang1, ang2 ] = getArcCenter(\n    px,\n    py,\n    cx,\n    cy,\n    rx,\n    ry,\n    largeArcFlag,\n    sweepFlag,\n    sinphi,\n    cosphi,\n    pxp,\n    pyp\n  )\n\n  const segments = Math.max(Math.ceil(Math.abs(ang2) / (TAU / 4)), 1)\n\n  ang2 /= segments\n\n  for (let i = 0; i < segments; i++) {\n    curves.push(approxUnitArc(ang1, ang2))\n    ang1 += ang2\n  }\n\n  return curves.map(curve => {\n    const { x: x1, y: y1 } = mapToEllipse(curve[ 0 ], rx, ry, cosphi, sinphi, centerx, centery)\n    const { x: x2, y: y2 } = mapToEllipse(curve[ 1 ], rx, ry, cosphi, sinphi, centerx, centery)\n    const { x, y } = mapToEllipse(curve[ 2 ], rx, ry, cosphi, sinphi, centerx, centery)\n\n    return { x1, y1, x2, y2, x, y }\n  })\n}\n\nexport default arcToBezier\n"],"names":["TAU","Math","PI","mapToEllipse","rx","ry","cosphi","sinphi","centerx","centery","x","y","approxUnitArc","ang1","ang2","a","tan","x1","cos","y1","sin","x2","y2","vectorAngle","ux","uy","vx","vy","sign","div","sqrt","acos","getArcCenter","px","py","cx","cy","largeArcFlag","sweepFlag","pxp","pyp","rxsq","pow","rysq","pxpsq","pypsq","radicant","centerxp","centeryp","vx1","vy1","vx2","vy2","xAxisRotation","curves","abs","lambda","segments","max","ceil","i","push","map","curve"],"mappings":"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"}